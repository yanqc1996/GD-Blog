(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{360:function(t,s,a){"use strict";a.r(s);var n=a(43),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"object-function-原型与原型链拓展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-function-原型与原型链拓展"}},[t._v("#")]),t._v(" Object/Function-原型与原型链拓展")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/6/16/172bc33e18ef5a4c?w=1508&h=910&f=png&s=295568",alt:"image.png"}}),t._v(" "),a("a",{attrs:{name:"SRbNP"}})]),t._v(" "),a("h1",{attrs:{id:"写在前面："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写在前面："}},[t._v("#")]),t._v(" 写在前面：")]),t._v(" "),a("p",[t._v("我们先来回顾下上次关于原型这块留下的一些问题："),a("br"),t._v("1.为什么Function，Object，构造函数Test的原型都是"),a("code",[t._v("Function.prototype")]),t._v("?"),a("br"),t._v("2.为什么"),a("code",[t._v("Function.__proto__")]),t._v("==="),a("code",[t._v("Function.prototype")]),t._v("?"),a("br"),t._v("3.为什么"),a("code",[t._v("Function.prototype")]),t._v("是一个函数，但是打印"),a("code",[t._v("Function.prototype.prototype")]),t._v("却是undefined？"),a("br"),t._v("本来想仔细去剖析一下原理，解释一下这是为啥，然后看到了"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/22989691",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://zhuanlan.zhihu.com/p/22989691"),a("OutboundLink")],1),t._v("，感觉作者非常形象的解释一些可能比较难理解的问题，因此有些东西就不在这里做赘述了，小伙伴们可以去赞下这篇文章哈。\n"),a("a",{attrs:{name:"HEcww"}})]),t._v(" "),a("h1",{attrs:{id:"_1-object-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-object-function"}},[t._v("#")]),t._v(" 1.Object/Function")]),t._v(" "),a("p",[t._v("我们根据以上流程图，可以总结出Object和Function之间的一些关系：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v("Function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototye\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("同时，我们将这四块的思维导图单独拿出来整理下："),a("br"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/6/16/172bc33e1a7faf1c?w=1058&h=652&f=png&s=162067",alt:"image.png"}}),a("br"),t._v("一眼望去，以上思维导图确实混乱，尤其是流程流转的过程中，会给人一种循环混乱，不知道源头在哪的情况，因此我们先把其他的内容隐藏掉，只关注原型链："),a("br"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/6/16/172bc33e1b8f775c?w=1064&h=694&f=png&s=123373",alt:"image.png"}}),a("br"),t._v("这样是不是就清晰很多了，我们将图改为一种更加容易理解的结构："),a("br"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/6/16/172bc33e1c7a74d7?w=778&h=646&f=png&s=96413",alt:"image.png"}}),a("br"),t._v("这个流程图契合了我们之前对于原型链描述：原型链的尽头就是"),a("code",[t._v("Object.prototype")]),a("strong",[t._v("(不考虑null的情况），所有对象都从")]),a("code",[t._v("Object.prototype")]),a("strong",[t._v("继承")]),a("code",[t._v("toString()")]),a("strong",[t._v(",")]),a("code",[t._v("valueOf()")]),a("strong",[t._v("等公共属性。")])]),t._v(" "),a("p",[t._v("根据上述流程整理，我们可以得出以下结论来判断初始化的顺序：先有"),a("code",[t._v("Object.prototype")]),t._v("（原型链顶端），"),a("code",[t._v("Function.prototype")]),t._v("继承"),a("code",[t._v("Object.prototype")]),t._v("而产生，同时，一切对象都继承自"),a("code",[t._v("Object.prototype")]),t._v("，而一切函数对象都继承自"),a("code",[t._v("Function.prototype")]),t._v("(且"),a("code",[t._v("Function.prototype")]),t._v("会最终继承自"),a("code",[t._v("Object.prototype")]),t._v(")，也就是说普通对象和函数对象的区别是：普通对象直接继承了"),a("code",[t._v("Object.prototype")]),t._v("，而函数对象在中间还继承了"),a("code",[t._v("Function.prototype")]),t._v("，"),a("br"),t._v("具体的创建流程还是可以参照："),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/22989691",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://zhuanlan.zhihu.com/p/22989691"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{name:"CKgdp"}})]),t._v(" "),a("h1",{attrs:{id:"_2-原型链拓展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-原型链拓展"}},[t._v("#")]),t._v(" 2.原型链拓展")]),t._v(" "),a("p",[a("a",{attrs:{name:"JXDDd"}})]),t._v(" "),a("h2",{attrs:{id:"_1-instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-instanceof"}},[t._v("#")]),t._v(" 1.instanceof")]),t._v(" "),a("p",[t._v("涉及到原型，经常会需要解释以下这个问题：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("Function "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\nObject "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("要理解这种情况的原因，我们首先需要理解"),a("code",[t._v("instanceof")]),t._v("运算符判断的是什么：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//假设instanceof运算符左边是L，右边是R")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("R")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//instanceof运算时，通过判断L的原型链上是否存在R.prototype")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("R")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype ？ "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果存在返回true 否则返回false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("总结一下："),a("code",[t._v("instanceof")]),a("strong",[t._v("会递归查找运算符左边数据的原型链上，是否存在右侧的")]),a("code",[t._v("prototype")]),a("strong",[t._v("原型")]),a("br"),t._v("我们根据思维导图可以进行判断："),a("br"),a("code",[t._v("Function.__proto__.__proto__===Object.prototype")]),a("br"),a("code",[t._v("Object.__proto__==Function.prototype")]),a("br"),t._v("因此以上两个式子成立。"),a("br"),t._v(" "),a("br"),t._v("PS：既然说到了"),a("code",[t._v("instanceof")]),t._v("，那就顺便来回顾下"),a("code",[t._v("typeof")]),t._v("："),a("br"),a("code",[t._v("typeof")]),t._v("原理： "),a("strong",[t._v("不同的对象在底层都表示为二进制，在Javascript中二进制前（低）三位存储其类型信息")])]),t._v(" "),a("ul",[a("li",[t._v("000: 对象")]),t._v(" "),a("li",[t._v("010: 浮点数")]),t._v(" "),a("li",[t._v("100：字符串")]),t._v(" "),a("li",[t._v("110： 布尔")]),t._v(" "),a("li",[t._v("1： 整数")])]),t._v(" "),a("p",[t._v("由此我们可以解释，"),a("code",[t._v("typeof null")]),t._v('为什么是"object"：不同的对象在底层都表示为二进制，在Javascript中二进制前（低）三位都为0的话会被判断为Object类型，null的二进制表示全为0，自然前三位也是0，所以执行'),a("code",[t._v("typeof")]),t._v('时会返回"object"\n'),a("a",{attrs:{name:"SHYeV"}})]),t._v(" "),a("h2",{attrs:{id:"_2-基本类型数据问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-基本类型数据问题"}},[t._v("#")]),t._v(" 2.基本类型数据问题")]),t._v(" "),a("p",[t._v("基于以上"),a("code",[t._v("typeof")]),t._v("和"),a("code",[t._v("instanceof")]),t._v("的区别，我们又提出了一个问题："),a("br"),t._v("基本数据类型有原型吗？思考一下，我们在工作中是都经常用到一些基本类型的方法，比如.length之类，那这些方法是从哪里继承的呢？"),a("br"),t._v("先在控制台打印以下的命令：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//两个小数点是因为数值后面调用方法，js会将点运算符解析为数值的小数点")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/6/16/172bc33e1d6a7833?w=1054&h=250&f=png&s=46580",alt:"image.png"}})]),t._v(" "),a("p",[t._v("再进行以下输出：")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//fasle")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("我们发现，如果根据"),a("code",[t._v("instanceof")]),t._v("之前的定义，"),a("code",[t._v("String.prototype")]),t._v("不在str的原型链上，那为什么输出基本类型的"),a("code",[t._v("__proto__")]),t._v("又会有指向呢？"),a("br"),t._v("这里就需要引入包装类型的概念了：为了便于操作基本类型值，"),a("code",[t._v("ECMAScript")]),a("strong",[t._v("还提供了3个特殊的引用类型：")]),a("code",[t._v("Boolean")]),a("strong",[t._v(",")]),a("code",[t._v("Number")]),a("strong",[t._v("和")]),a("code",[t._v("String")]),a("strong",[t._v("。这些类型与其他引用类型相似，但同时也具有各自的基本类型相应的特殊行为。")]),a("br"),a("strong",[t._v("引用类型和包装类型的主要区别就是对象的生存期，使用new操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中，而包装类型则只存在于一行代码的执行瞬间，然后立即被销毁，这意味着我们不能在运行时为基本类型添加属性和方法。")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("say"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("say"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//undefined")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("同时，我们还需要引出装箱和拆箱的概念：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("装箱：把基本类型转换为对应的包装类型")]),a("br")]),t._v(" "),a("li",[a("strong",[t._v("拆箱：把引用类型转换为基本类型")])])]),t._v(" "),a("p",[t._v("结合以上概念，我们就可以解释上述问题了：每当我们操作一个基础类型的时候，JS就会自动创建一个包装类型的对象，从而让我们能够调用一些方法和属性。我们在创建基本类型并调用方法的时候，其实发生了以下几个步骤：1.创建一个包装类型实例  2.在实例上调用方法  3.销毁实例"),a("br"),t._v("也就是说，我们使用基本类型调用方法，就会自动进行装箱和拆箱操作"),a("br"),t._v("因此，我们调用基本类型的__proto__方法时，就会将基本类型自动转换成包装类型，因此会有原型指向，而我们使用instanceof方法时，不使用基本类型调用方法，判断的就是基本类型，因此为false。"),a("br"),t._v(" "),a("br"),t._v("以上，我们完善了部分原型和原型链的概念扩展。同时，从中发现对于JS基础的数据类型这一块还存在还有一些盲点，那么下一篇我们就针对js基本的数据类型进行一些深入研究。"),a("br")]),t._v(" "),a("p",[a("a",{attrs:{name:"NCfDU"}})]),t._v(" "),a("h1",{attrs:{id:"写在最后："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写在最后："}},[t._v("#")]),t._v(" 写在最后：")]),t._v(" "),a("p",[a("strong",[t._v("文章中很多个人的理解可能比较浅显，如果文章中有哪些概念有偏差或者错误的麻烦大家不吝指正哈！一起学习一起进步")])])])}),[],!1,null,null,null);s.default=e.exports}}]);